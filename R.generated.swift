//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Forecast`.
    static let forecast = _R.storyboard.forecast()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Weather`.
    static let weather = _R.storyboard.weather()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Forecast", bundle: ...)`
    static func forecast(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forecast)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Weather", bundle: ...)`
    static func weather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.weather)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `cl-light-blue`.
    static let clLightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-light-blue")
    /// Color `cl-light-gray`.
    static let clLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-light-gray")
    /// Color `cl-orange`.
    static let clOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-orange")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-light-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clLightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clLightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-light-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clOrange, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Montserrat-Light.otf`.
    static let montserratLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Light", pathExtension: "otf")
    /// Resource file `Montserrat-Medium.otf`.
    static let montserratMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "otf")
    /// Resource file `swiftgen.yml`.
    static let swiftgenYml = Rswift.FileResource(bundle: R.hostingBundle, name: "swiftgen", pathExtension: "yml")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Light", withExtension: "otf")`
    static func montserratLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "otf")`
    static func montserratMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swiftgen", withExtension: "yml")`
    static func swiftgenYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftgenYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")

    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    static func validate() throws {
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `BrokenCloudsDay`.
    static let brokenCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "BrokenCloudsDay")
    /// Image `BrokenCloudsNight`.
    static let brokenCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "BrokenCloudsNight")
    /// Image `ClearSkyDay`.
    static let clearSkyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearSkyDay")
    /// Image `ClearSkyNight`.
    static let clearSkyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearSkyNight")
    /// Image `CurrentLocationOther`.
    static let currentLocationOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "CurrentLocationOther")
    /// Image `FewCloudsDay`.
    static let fewCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "FewCloudsDay")
    /// Image `FewCloudsNight`.
    static let fewCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "FewCloudsNight")
    /// Image `ForecastActiveTab`.
    static let forecastActiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ForecastActiveTab")
    /// Image `ForecastInactiveTab`.
    static let forecastInactiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ForecastInactiveTab")
    /// Image `HumidityOther`.
    static let humidityOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "HumidityOther")
    /// Image `LaunchLogo`.
    static let launchLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchLogo")
    /// Image `Line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line")
    /// Image `MistDay`.
    static let mistDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "MistDay")
    /// Image `MistNight`.
    static let mistNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "MistNight")
    /// Image `PrecipitationOther`.
    static let precipitationOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrecipitationOther")
    /// Image `PressureOther`.
    static let pressureOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "PressureOther")
    /// Image `RainDay`.
    static let rainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "RainDay")
    /// Image `RainNight`.
    static let rainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "RainNight")
    /// Image `ScatteredCloudsDay`.
    static let scatteredCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScatteredCloudsDay")
    /// Image `ScatteredCloudsNight`.
    static let scatteredCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScatteredCloudsNight")
    /// Image `ShowerRainDay`.
    static let showerRainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowerRainDay")
    /// Image `ShowerRainNight`.
    static let showerRainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowerRainNight")
    /// Image `SnowDay`.
    static let snowDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnowDay")
    /// Image `SnowNight`.
    static let snowNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnowNight")
    /// Image `ThunderstormDay`.
    static let thunderstormDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThunderstormDay")
    /// Image `ThunderstormNight`.
    static let thunderstormNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThunderstormNight")
    /// Image `TodayActiveTab`.
    static let todayActiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "TodayActiveTab")
    /// Image `TodayInactiveTab`.
    static let todayInactiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "TodayInactiveTab")
    /// Image `WindDirection`.
    static let windDirection = Rswift.ImageResource(bundle: R.hostingBundle, name: "WindDirection")
    /// Image `WindOther`.
    static let windOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "WindOther")
    /// Image `divider`.
    static let divider = Rswift.ImageResource(bundle: R.hostingBundle, name: "divider")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BrokenCloudsDay", bundle: ..., traitCollection: ...)`
    static func brokenCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokenCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BrokenCloudsNight", bundle: ..., traitCollection: ...)`
    static func brokenCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokenCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearSkyDay", bundle: ..., traitCollection: ...)`
    static func clearSkyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearSkyDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearSkyNight", bundle: ..., traitCollection: ...)`
    static func clearSkyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearSkyNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CurrentLocationOther", bundle: ..., traitCollection: ...)`
    static func currentLocationOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocationOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FewCloudsDay", bundle: ..., traitCollection: ...)`
    static func fewCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FewCloudsNight", bundle: ..., traitCollection: ...)`
    static func fewCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ForecastActiveTab", bundle: ..., traitCollection: ...)`
    static func forecastActiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forecastActiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ForecastInactiveTab", bundle: ..., traitCollection: ...)`
    static func forecastInactiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forecastInactiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HumidityOther", bundle: ..., traitCollection: ...)`
    static func humidityOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidityOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchLogo", bundle: ..., traitCollection: ...)`
    static func launchLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MistDay", bundle: ..., traitCollection: ...)`
    static func mistDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mistDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MistNight", bundle: ..., traitCollection: ...)`
    static func mistNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mistNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrecipitationOther", bundle: ..., traitCollection: ...)`
    static func precipitationOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.precipitationOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PressureOther", bundle: ..., traitCollection: ...)`
    static func pressureOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pressureOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RainDay", bundle: ..., traitCollection: ...)`
    static func rainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RainNight", bundle: ..., traitCollection: ...)`
    static func rainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScatteredCloudsDay", bundle: ..., traitCollection: ...)`
    static func scatteredCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatteredCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScatteredCloudsNight", bundle: ..., traitCollection: ...)`
    static func scatteredCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatteredCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowerRainDay", bundle: ..., traitCollection: ...)`
    static func showerRainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showerRainDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowerRainNight", bundle: ..., traitCollection: ...)`
    static func showerRainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showerRainNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnowDay", bundle: ..., traitCollection: ...)`
    static func snowDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnowNight", bundle: ..., traitCollection: ...)`
    static func snowNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThunderstormDay", bundle: ..., traitCollection: ...)`
    static func thunderstormDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderstormDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThunderstormNight", bundle: ..., traitCollection: ...)`
    static func thunderstormNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderstormNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TodayActiveTab", bundle: ..., traitCollection: ...)`
    static func todayActiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayActiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TodayInactiveTab", bundle: ..., traitCollection: ...)`
    static func todayInactiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayInactiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WindDirection", bundle: ..., traitCollection: ...)`
    static func windDirection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windDirection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WindOther", bundle: ..., traitCollection: ...)`
    static func windOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "divider", bundle: ..., traitCollection: ...)`
    static func divider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.divider, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ForecastDayTableViewCell`.
    static let forecastDayTableViewCell = _R.nib._ForecastDayTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ForecastDayTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.forecastDayTableViewCell) instead")
    static func forecastDayTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastDayTableViewCell)
    }
    #endif

    static func forecastDayTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForecastDayTableViewCell? {
      return R.nib.forecastDayTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastDayTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ForecastDayTableViewCell`.
    static let forecastDayTableViewCell: Rswift.ReuseIdentifier<ForecastDayTableViewCell> = Rswift.ReuseIdentifier(identifier: "ForecastDayTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 50 localization keys.
    struct localizable {
      /// Base translation: An error has occurred. Please try again
      ///
      /// Locales: en, ja, Base
      static let errorGenericError = Rswift.StringResource(key: "Error.genericError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Broken Clouds
      ///
      /// Locales: en, ja, Base
      static let weatherConditionBrokenClouds = Rswift.StringResource(key: "WeatherCondition.brokenClouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Clear
      ///
      /// Locales: en, ja, Base
      static let weatherConditionClear = Rswift.StringResource(key: "WeatherCondition.clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Dust
      ///
      /// Locales: en, ja, Base
      static let weatherConditionDust = Rswift.StringResource(key: "WeatherCondition.dust", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Extreme Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionExtremeRain = Rswift.StringResource(key: "WeatherCondition.extremeRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Few Clouds
      ///
      /// Locales: en, ja, Base
      static let weatherConditionFewClouds = Rswift.StringResource(key: "WeatherCondition.fewClouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Fog
      ///
      /// Locales: en, ja, Base
      static let weatherConditionFog = Rswift.StringResource(key: "WeatherCondition.fog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Forecast
      ///
      /// Locales: en, ja, Base
      static let forecastTitle = Rswift.StringResource(key: "Forecast.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Freezing Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionFreezingRain = Rswift.StringResource(key: "WeatherCondition.freezingRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Haze
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHaze = Rswift.StringResource(key: "WeatherCondition.haze", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Heavy Intensity Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHeavyIntensityRain = Rswift.StringResource(key: "WeatherCondition.heavyIntensityRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Heavy Intensity Shower Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHeavyIntensityShowerRain = Rswift.StringResource(key: "WeatherCondition.heavyIntensityShowerRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Heavy Shower Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHeavyShowerSnow = Rswift.StringResource(key: "WeatherCondition.heavyShowerSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Heavy Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHeavySnow = Rswift.StringResource(key: "WeatherCondition.heavySnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Heavy Thunderstorm
      ///
      /// Locales: en, ja, Base
      static let weatherConditionHeavyThunderstorm = Rswift.StringResource(key: "WeatherCondition.heavyThunderstorm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Intensity Shower Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightIntensityShowerRain = Rswift.StringResource(key: "WeatherCondition.lightIntensityShowerRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightRain = Rswift.StringResource(key: "WeatherCondition.lightRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Rain Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightRainSnow = Rswift.StringResource(key: "WeatherCondition.lightRainSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Shower Sleet
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightShowerSleet = Rswift.StringResource(key: "WeatherCondition.lightShowerSleet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Shower Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightShowerSnow = Rswift.StringResource(key: "WeatherCondition.lightShowerSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightSnow = Rswift.StringResource(key: "WeatherCondition.lightSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Light Thunderstorm
      ///
      /// Locales: en, ja, Base
      static let weatherConditionLightThunderstorm = Rswift.StringResource(key: "WeatherCondition.lightThunderstorm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Mist
      ///
      /// Locales: en, ja, Base
      static let weatherConditionMist = Rswift.StringResource(key: "WeatherCondition.mist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Moderate Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionModerateRain = Rswift.StringResource(key: "WeatherCondition.moderateRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Overcast Clouds
      ///
      /// Locales: en, ja, Base
      static let weatherConditionOvercastClouds = Rswift.StringResource(key: "WeatherCondition.overcastClouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Ragged Shower Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionRaggedShowerRain = Rswift.StringResource(key: "WeatherCondition.raggedShowerRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Ragged Thunderstorm
      ///
      /// Locales: en, ja, Base
      static let weatherConditionRaggedThunderstorm = Rswift.StringResource(key: "WeatherCondition.raggedThunderstorm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Rain Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionRainSnow = Rswift.StringResource(key: "WeatherCondition.rainSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Sand
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSand = Rswift.StringResource(key: "WeatherCondition.sand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Sand Dust Whirls
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSandDustWhirls = Rswift.StringResource(key: "WeatherCondition.sandDustWhirls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Scattered Clouds
      ///
      /// Locales: en, ja, Base
      static let weatherConditionScatteredClouds = Rswift.StringResource(key: "WeatherCondition.scatteredClouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Shower Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionShowerRain = Rswift.StringResource(key: "WeatherCondition.showerRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Shower Sleet
      ///
      /// Locales: en, ja, Base
      static let weatherConditionShowerSleet = Rswift.StringResource(key: "WeatherCondition.showerSleet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Shower Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionShowerSnow = Rswift.StringResource(key: "WeatherCondition.showerSnow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Sleet
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSleet = Rswift.StringResource(key: "WeatherCondition.sleet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Smoke
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSmoke = Rswift.StringResource(key: "WeatherCondition.smoke", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Snow
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSnow = Rswift.StringResource(key: "WeatherCondition.snow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Squalls
      ///
      /// Locales: en, ja, Base
      static let weatherConditionSqualls = Rswift.StringResource(key: "WeatherCondition.squalls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: There is no data available
      ///
      /// Locales: en, ja, Base
      static let errorNoData = Rswift.StringResource(key: "Error.noData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstorm = Rswift.StringResource(key: "WeatherCondition.thunderstorm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Drizzle
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormDrizzle = Rswift.StringResource(key: "WeatherCondition.thunderstormDrizzle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Heavy Drizzle
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormHeavyDrizzle = Rswift.StringResource(key: "WeatherCondition.thunderstormHeavyDrizzle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Heavy Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormHeavyRain = Rswift.StringResource(key: "WeatherCondition.thunderstormHeavyRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Light Drizzle
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormLightDrizzle = Rswift.StringResource(key: "WeatherCondition.thunderstormLightDrizzle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Light Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormLightRain = Rswift.StringResource(key: "WeatherCondition.thunderstormLightRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Thunderstorm with Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionThunderstormRain = Rswift.StringResource(key: "WeatherCondition.thunderstormRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Today
      ///
      /// Locales: en, ja, Base
      static let todayTitle = Rswift.StringResource(key: "Today.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Tornado
      ///
      /// Locales: en, ja, Base
      static let weatherConditionTornado = Rswift.StringResource(key: "WeatherCondition.tornado", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Very Heavy Rain
      ///
      /// Locales: en, ja, Base
      static let weatherConditionVeryHeavyRain = Rswift.StringResource(key: "WeatherCondition.veryHeavyRain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)
      /// Base translation: Volcanic Ash
      ///
      /// Locales: en, ja, Base
      static let weatherConditionVolcanicAsh = Rswift.StringResource(key: "WeatherCondition.volcanicAsh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "Base"], comment: nil)

      /// Base translation: An error has occurred. Please try again
      ///
      /// Locales: en, ja, Base
      static func errorGenericError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.genericError", bundle: hostingBundle, value: "An error has occurred. Please try again", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.genericError"
        }

        return NSLocalizedString("Error.genericError", bundle: bundle, value: "An error has occurred. Please try again", comment: "")
      }

      /// Base translation: Broken Clouds
      ///
      /// Locales: en, ja, Base
      static func weatherConditionBrokenClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.brokenClouds", bundle: hostingBundle, value: "Broken Clouds", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.brokenClouds"
        }

        return NSLocalizedString("WeatherCondition.brokenClouds", bundle: bundle, value: "Broken Clouds", comment: "")
      }

      /// Base translation: Clear
      ///
      /// Locales: en, ja, Base
      static func weatherConditionClear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.clear", bundle: hostingBundle, value: "Clear", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.clear"
        }

        return NSLocalizedString("WeatherCondition.clear", bundle: bundle, value: "Clear", comment: "")
      }

      /// Base translation: Dust
      ///
      /// Locales: en, ja, Base
      static func weatherConditionDust(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.dust", bundle: hostingBundle, value: "Dust", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.dust"
        }

        return NSLocalizedString("WeatherCondition.dust", bundle: bundle, value: "Dust", comment: "")
      }

      /// Base translation: Extreme Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionExtremeRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.extremeRain", bundle: hostingBundle, value: "Extreme Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.extremeRain"
        }

        return NSLocalizedString("WeatherCondition.extremeRain", bundle: bundle, value: "Extreme Rain", comment: "")
      }

      /// Base translation: Few Clouds
      ///
      /// Locales: en, ja, Base
      static func weatherConditionFewClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.fewClouds", bundle: hostingBundle, value: "Few Clouds", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.fewClouds"
        }

        return NSLocalizedString("WeatherCondition.fewClouds", bundle: bundle, value: "Few Clouds", comment: "")
      }

      /// Base translation: Fog
      ///
      /// Locales: en, ja, Base
      static func weatherConditionFog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.fog", bundle: hostingBundle, value: "Fog", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.fog"
        }

        return NSLocalizedString("WeatherCondition.fog", bundle: bundle, value: "Fog", comment: "")
      }

      /// Base translation: Forecast
      ///
      /// Locales: en, ja, Base
      static func forecastTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forecast.title", bundle: hostingBundle, value: "Forecast", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forecast.title"
        }

        return NSLocalizedString("Forecast.title", bundle: bundle, value: "Forecast", comment: "")
      }

      /// Base translation: Freezing Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionFreezingRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.freezingRain", bundle: hostingBundle, value: "Freezing Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.freezingRain"
        }

        return NSLocalizedString("WeatherCondition.freezingRain", bundle: bundle, value: "Freezing Rain", comment: "")
      }

      /// Base translation: Haze
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHaze(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.haze", bundle: hostingBundle, value: "Haze", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.haze"
        }

        return NSLocalizedString("WeatherCondition.haze", bundle: bundle, value: "Haze", comment: "")
      }

      /// Base translation: Heavy Intensity Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHeavyIntensityRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.heavyIntensityRain", bundle: hostingBundle, value: "Heavy Intensity Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.heavyIntensityRain"
        }

        return NSLocalizedString("WeatherCondition.heavyIntensityRain", bundle: bundle, value: "Heavy Intensity Rain", comment: "")
      }

      /// Base translation: Heavy Intensity Shower Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHeavyIntensityShowerRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.heavyIntensityShowerRain", bundle: hostingBundle, value: "Heavy Intensity Shower Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.heavyIntensityShowerRain"
        }

        return NSLocalizedString("WeatherCondition.heavyIntensityShowerRain", bundle: bundle, value: "Heavy Intensity Shower Rain", comment: "")
      }

      /// Base translation: Heavy Shower Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHeavyShowerSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.heavyShowerSnow", bundle: hostingBundle, value: "Heavy Shower Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.heavyShowerSnow"
        }

        return NSLocalizedString("WeatherCondition.heavyShowerSnow", bundle: bundle, value: "Heavy Shower Snow", comment: "")
      }

      /// Base translation: Heavy Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHeavySnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.heavySnow", bundle: hostingBundle, value: "Heavy Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.heavySnow"
        }

        return NSLocalizedString("WeatherCondition.heavySnow", bundle: bundle, value: "Heavy Snow", comment: "")
      }

      /// Base translation: Heavy Thunderstorm
      ///
      /// Locales: en, ja, Base
      static func weatherConditionHeavyThunderstorm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.heavyThunderstorm", bundle: hostingBundle, value: "Heavy Thunderstorm", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.heavyThunderstorm"
        }

        return NSLocalizedString("WeatherCondition.heavyThunderstorm", bundle: bundle, value: "Heavy Thunderstorm", comment: "")
      }

      /// Base translation: Light Intensity Shower Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightIntensityShowerRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightIntensityShowerRain", bundle: hostingBundle, value: "Light Intensity Shower Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightIntensityShowerRain"
        }

        return NSLocalizedString("WeatherCondition.lightIntensityShowerRain", bundle: bundle, value: "Light Intensity Shower Rain", comment: "")
      }

      /// Base translation: Light Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightRain", bundle: hostingBundle, value: "Light Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightRain"
        }

        return NSLocalizedString("WeatherCondition.lightRain", bundle: bundle, value: "Light Rain", comment: "")
      }

      /// Base translation: Light Rain Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightRainSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightRainSnow", bundle: hostingBundle, value: "Light Rain Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightRainSnow"
        }

        return NSLocalizedString("WeatherCondition.lightRainSnow", bundle: bundle, value: "Light Rain Snow", comment: "")
      }

      /// Base translation: Light Shower Sleet
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightShowerSleet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightShowerSleet", bundle: hostingBundle, value: "Light Shower Sleet", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightShowerSleet"
        }

        return NSLocalizedString("WeatherCondition.lightShowerSleet", bundle: bundle, value: "Light Shower Sleet", comment: "")
      }

      /// Base translation: Light Shower Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightShowerSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightShowerSnow", bundle: hostingBundle, value: "Light Shower Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightShowerSnow"
        }

        return NSLocalizedString("WeatherCondition.lightShowerSnow", bundle: bundle, value: "Light Shower Snow", comment: "")
      }

      /// Base translation: Light Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightSnow", bundle: hostingBundle, value: "Light Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightSnow"
        }

        return NSLocalizedString("WeatherCondition.lightSnow", bundle: bundle, value: "Light Snow", comment: "")
      }

      /// Base translation: Light Thunderstorm
      ///
      /// Locales: en, ja, Base
      static func weatherConditionLightThunderstorm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.lightThunderstorm", bundle: hostingBundle, value: "Light Thunderstorm", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.lightThunderstorm"
        }

        return NSLocalizedString("WeatherCondition.lightThunderstorm", bundle: bundle, value: "Light Thunderstorm", comment: "")
      }

      /// Base translation: Mist
      ///
      /// Locales: en, ja, Base
      static func weatherConditionMist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.mist", bundle: hostingBundle, value: "Mist", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.mist"
        }

        return NSLocalizedString("WeatherCondition.mist", bundle: bundle, value: "Mist", comment: "")
      }

      /// Base translation: Moderate Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionModerateRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.moderateRain", bundle: hostingBundle, value: "Moderate Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.moderateRain"
        }

        return NSLocalizedString("WeatherCondition.moderateRain", bundle: bundle, value: "Moderate Rain", comment: "")
      }

      /// Base translation: Overcast Clouds
      ///
      /// Locales: en, ja, Base
      static func weatherConditionOvercastClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.overcastClouds", bundle: hostingBundle, value: "Overcast Clouds", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.overcastClouds"
        }

        return NSLocalizedString("WeatherCondition.overcastClouds", bundle: bundle, value: "Overcast Clouds", comment: "")
      }

      /// Base translation: Ragged Shower Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionRaggedShowerRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.raggedShowerRain", bundle: hostingBundle, value: "Ragged Shower Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.raggedShowerRain"
        }

        return NSLocalizedString("WeatherCondition.raggedShowerRain", bundle: bundle, value: "Ragged Shower Rain", comment: "")
      }

      /// Base translation: Ragged Thunderstorm
      ///
      /// Locales: en, ja, Base
      static func weatherConditionRaggedThunderstorm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.raggedThunderstorm", bundle: hostingBundle, value: "Ragged Thunderstorm", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.raggedThunderstorm"
        }

        return NSLocalizedString("WeatherCondition.raggedThunderstorm", bundle: bundle, value: "Ragged Thunderstorm", comment: "")
      }

      /// Base translation: Rain Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionRainSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.rainSnow", bundle: hostingBundle, value: "Rain Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.rainSnow"
        }

        return NSLocalizedString("WeatherCondition.rainSnow", bundle: bundle, value: "Rain Snow", comment: "")
      }

      /// Base translation: Sand
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.sand", bundle: hostingBundle, value: "Sand", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.sand"
        }

        return NSLocalizedString("WeatherCondition.sand", bundle: bundle, value: "Sand", comment: "")
      }

      /// Base translation: Sand Dust Whirls
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSandDustWhirls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.sandDustWhirls", bundle: hostingBundle, value: "Sand Dust Whirls", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.sandDustWhirls"
        }

        return NSLocalizedString("WeatherCondition.sandDustWhirls", bundle: bundle, value: "Sand Dust Whirls", comment: "")
      }

      /// Base translation: Scattered Clouds
      ///
      /// Locales: en, ja, Base
      static func weatherConditionScatteredClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.scatteredClouds", bundle: hostingBundle, value: "Scattered Clouds", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.scatteredClouds"
        }

        return NSLocalizedString("WeatherCondition.scatteredClouds", bundle: bundle, value: "Scattered Clouds", comment: "")
      }

      /// Base translation: Shower Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionShowerRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.showerRain", bundle: hostingBundle, value: "Shower Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.showerRain"
        }

        return NSLocalizedString("WeatherCondition.showerRain", bundle: bundle, value: "Shower Rain", comment: "")
      }

      /// Base translation: Shower Sleet
      ///
      /// Locales: en, ja, Base
      static func weatherConditionShowerSleet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.showerSleet", bundle: hostingBundle, value: "Shower Sleet", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.showerSleet"
        }

        return NSLocalizedString("WeatherCondition.showerSleet", bundle: bundle, value: "Shower Sleet", comment: "")
      }

      /// Base translation: Shower Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionShowerSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.showerSnow", bundle: hostingBundle, value: "Shower Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.showerSnow"
        }

        return NSLocalizedString("WeatherCondition.showerSnow", bundle: bundle, value: "Shower Snow", comment: "")
      }

      /// Base translation: Sleet
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSleet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.sleet", bundle: hostingBundle, value: "Sleet", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.sleet"
        }

        return NSLocalizedString("WeatherCondition.sleet", bundle: bundle, value: "Sleet", comment: "")
      }

      /// Base translation: Smoke
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSmoke(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.smoke", bundle: hostingBundle, value: "Smoke", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.smoke"
        }

        return NSLocalizedString("WeatherCondition.smoke", bundle: bundle, value: "Smoke", comment: "")
      }

      /// Base translation: Snow
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.snow", bundle: hostingBundle, value: "Snow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.snow"
        }

        return NSLocalizedString("WeatherCondition.snow", bundle: bundle, value: "Snow", comment: "")
      }

      /// Base translation: Squalls
      ///
      /// Locales: en, ja, Base
      static func weatherConditionSqualls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.squalls", bundle: hostingBundle, value: "Squalls", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.squalls"
        }

        return NSLocalizedString("WeatherCondition.squalls", bundle: bundle, value: "Squalls", comment: "")
      }

      /// Base translation: There is no data available
      ///
      /// Locales: en, ja, Base
      static func errorNoData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.noData", bundle: hostingBundle, value: "There is no data available", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.noData"
        }

        return NSLocalizedString("Error.noData", bundle: bundle, value: "There is no data available", comment: "")
      }

      /// Base translation: Thunderstorm
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstorm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstorm", bundle: hostingBundle, value: "Thunderstorm", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstorm"
        }

        return NSLocalizedString("WeatherCondition.thunderstorm", bundle: bundle, value: "Thunderstorm", comment: "")
      }

      /// Base translation: Thunderstorm with Drizzle
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormDrizzle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormDrizzle", bundle: hostingBundle, value: "Thunderstorm with Drizzle", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormDrizzle"
        }

        return NSLocalizedString("WeatherCondition.thunderstormDrizzle", bundle: bundle, value: "Thunderstorm with Drizzle", comment: "")
      }

      /// Base translation: Thunderstorm with Heavy Drizzle
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormHeavyDrizzle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormHeavyDrizzle", bundle: hostingBundle, value: "Thunderstorm with Heavy Drizzle", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormHeavyDrizzle"
        }

        return NSLocalizedString("WeatherCondition.thunderstormHeavyDrizzle", bundle: bundle, value: "Thunderstorm with Heavy Drizzle", comment: "")
      }

      /// Base translation: Thunderstorm with Heavy Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormHeavyRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormHeavyRain", bundle: hostingBundle, value: "Thunderstorm with Heavy Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormHeavyRain"
        }

        return NSLocalizedString("WeatherCondition.thunderstormHeavyRain", bundle: bundle, value: "Thunderstorm with Heavy Rain", comment: "")
      }

      /// Base translation: Thunderstorm with Light Drizzle
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormLightDrizzle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormLightDrizzle", bundle: hostingBundle, value: "Thunderstorm with Light Drizzle", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormLightDrizzle"
        }

        return NSLocalizedString("WeatherCondition.thunderstormLightDrizzle", bundle: bundle, value: "Thunderstorm with Light Drizzle", comment: "")
      }

      /// Base translation: Thunderstorm with Light Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormLightRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormLightRain", bundle: hostingBundle, value: "Thunderstorm with Light Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormLightRain"
        }

        return NSLocalizedString("WeatherCondition.thunderstormLightRain", bundle: bundle, value: "Thunderstorm with Light Rain", comment: "")
      }

      /// Base translation: Thunderstorm with Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionThunderstormRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.thunderstormRain", bundle: hostingBundle, value: "Thunderstorm with Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.thunderstormRain"
        }

        return NSLocalizedString("WeatherCondition.thunderstormRain", bundle: bundle, value: "Thunderstorm with Rain", comment: "")
      }

      /// Base translation: Today
      ///
      /// Locales: en, ja, Base
      static func todayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Today.title", bundle: hostingBundle, value: "Today", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Today.title"
        }

        return NSLocalizedString("Today.title", bundle: bundle, value: "Today", comment: "")
      }

      /// Base translation: Tornado
      ///
      /// Locales: en, ja, Base
      static func weatherConditionTornado(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.tornado", bundle: hostingBundle, value: "Tornado", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.tornado"
        }

        return NSLocalizedString("WeatherCondition.tornado", bundle: bundle, value: "Tornado", comment: "")
      }

      /// Base translation: Very Heavy Rain
      ///
      /// Locales: en, ja, Base
      static func weatherConditionVeryHeavyRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.veryHeavyRain", bundle: hostingBundle, value: "Very Heavy Rain", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.veryHeavyRain"
        }

        return NSLocalizedString("WeatherCondition.veryHeavyRain", bundle: bundle, value: "Very Heavy Rain", comment: "")
      }

      /// Base translation: Volcanic Ash
      ///
      /// Locales: en, ja, Base
      static func weatherConditionVolcanicAsh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherCondition.volcanicAsh", bundle: hostingBundle, value: "Volcanic Ash", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WeatherCondition.volcanicAsh"
        }

        return NSLocalizedString("WeatherCondition.volcanicAsh", bundle: bundle, value: "Volcanic Ash", comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ForecastDayTableViewCell.validate()
    }

    struct _ForecastDayTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ForecastDayTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ForecastDayTableViewCell"
      let name = "ForecastDayTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForecastDayTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastDayTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ClearSkyDay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ClearSkyDay' is used in nib 'ForecastDayTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cl-light-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-blue' is used in storyboard 'ForecastDayTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cl-light-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-gray' is used in storyboard 'ForecastDayTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try forecast.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try weather.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct forecast: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ForecastViewController

      let bundle = R.hostingBundle
      let forecastViewController = StoryboardViewControllerResource<ForecastViewController>(identifier: "forecastViewController")
      let name = "Forecast"

      func forecastViewController(_: Void = ()) -> ForecastViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ForecastActiveTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ForecastActiveTab' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ForecastInactiveTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ForecastInactiveTab' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.forecast().forecastViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastViewController' could not be loaded from storyboard 'Forecast' as 'ForecastViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cl-light-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-blue' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let mainTabViewController = StoryboardViewControllerResource<MainTabViewController>(identifier: "mainTabViewController")
      let name = "Main"

      func mainTabViewController(_: Void = ()) -> MainTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainTabViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabViewController' could not be loaded from storyboard 'Main' as 'MainTabViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct weather: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WeatherViewController

      let bundle = R.hostingBundle
      let name = "Weather"
      let weatherViewController = StoryboardViewControllerResource<WeatherViewController>(identifier: "weatherViewController")

      func weatherViewController(_: Void = ()) -> WeatherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ClearSkyDay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ClearSkyDay' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CurrentLocationOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CurrentLocationOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HumidityOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HumidityOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PrecipitationOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PrecipitationOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PressureOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PressureOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TodayActiveTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TodayActiveTab' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TodayInactiveTab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TodayInactiveTab' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WindDirection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WindDirection' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WindOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WindOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "divider", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'divider' is used in storyboard 'Weather', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cl-light-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-blue' is used in storyboard 'Weather', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cl-orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-orange' is used in storyboard 'Weather', but couldn't be loaded.") }
        }
        if _R.storyboard.weather().weatherViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherViewController' could not be loaded from storyboard 'Weather' as 'WeatherViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
