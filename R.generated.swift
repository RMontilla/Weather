//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Forecast`.
    static let forecast = _R.storyboard.forecast()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Weather`.
    static let weather = _R.storyboard.weather()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Forecast", bundle: ...)`
    static func forecast(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forecast)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Weather", bundle: ...)`
    static func weather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.weather)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `cl-light-blue`.
    static let clLightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-light-blue")
    /// Color `cl-light-gray`.
    static let clLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-light-gray")
    /// Color `cl-orange`.
    static let clOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "cl-orange")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-light-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clLightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clLightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-light-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cl-orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clOrange, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Montserrat-Light.otf`.
    static let montserratLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Light", pathExtension: "otf")
    /// Resource file `Montserrat-Medium.otf`.
    static let montserratMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "otf")

    /// `bundle.url(forResource: "Montserrat-Light", withExtension: "otf")`
    static func montserratLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "otf")`
    static func montserratMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")

    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    static func validate() throws {
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `BrokenCloudsDay`.
    static let brokenCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "BrokenCloudsDay")
    /// Image `BrokenCloudsNight`.
    static let brokenCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "BrokenCloudsNight")
    /// Image `ClearSkyDay`.
    static let clearSkyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearSkyDay")
    /// Image `ClearSkyNight`.
    static let clearSkyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ClearSkyNight")
    /// Image `CurrentLocationOther`.
    static let currentLocationOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "CurrentLocationOther")
    /// Image `FewCloudsDay`.
    static let fewCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "FewCloudsDay")
    /// Image `FewCloudsNight`.
    static let fewCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "FewCloudsNight")
    /// Image `ForecastActiveTab`.
    static let forecastActiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ForecastActiveTab")
    /// Image `ForecastInactiveTab`.
    static let forecastInactiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ForecastInactiveTab")
    /// Image `HumidityOther`.
    static let humidityOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "HumidityOther")
    /// Image `LaunchLogo`.
    static let launchLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchLogo")
    /// Image `Line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line")
    /// Image `MistDay`.
    static let mistDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "MistDay")
    /// Image `MistNight`.
    static let mistNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "MistNight")
    /// Image `PrecipitationOther`.
    static let precipitationOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrecipitationOther")
    /// Image `PressureOther`.
    static let pressureOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "PressureOther")
    /// Image `RainDay`.
    static let rainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "RainDay")
    /// Image `RainNight`.
    static let rainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "RainNight")
    /// Image `ScatteredCloudsDay`.
    static let scatteredCloudsDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScatteredCloudsDay")
    /// Image `ScatteredCloudsNight`.
    static let scatteredCloudsNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScatteredCloudsNight")
    /// Image `ShowerRainDay`.
    static let showerRainDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowerRainDay")
    /// Image `ShowerRainNight`.
    static let showerRainNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowerRainNight")
    /// Image `SnowDay`.
    static let snowDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnowDay")
    /// Image `SnowNight`.
    static let snowNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnowNight")
    /// Image `ThunderstormDay`.
    static let thunderstormDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThunderstormDay")
    /// Image `ThunderstormNight`.
    static let thunderstormNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThunderstormNight")
    /// Image `TodayActiveTab`.
    static let todayActiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "TodayActiveTab")
    /// Image `TodayInactiveTab`.
    static let todayInactiveTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "TodayInactiveTab")
    /// Image `WindDirection`.
    static let windDirection = Rswift.ImageResource(bundle: R.hostingBundle, name: "WindDirection")
    /// Image `WindOther`.
    static let windOther = Rswift.ImageResource(bundle: R.hostingBundle, name: "WindOther")
    /// Image `divider`.
    static let divider = Rswift.ImageResource(bundle: R.hostingBundle, name: "divider")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BrokenCloudsDay", bundle: ..., traitCollection: ...)`
    static func brokenCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokenCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BrokenCloudsNight", bundle: ..., traitCollection: ...)`
    static func brokenCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokenCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearSkyDay", bundle: ..., traitCollection: ...)`
    static func clearSkyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearSkyDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ClearSkyNight", bundle: ..., traitCollection: ...)`
    static func clearSkyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearSkyNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CurrentLocationOther", bundle: ..., traitCollection: ...)`
    static func currentLocationOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocationOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FewCloudsDay", bundle: ..., traitCollection: ...)`
    static func fewCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FewCloudsNight", bundle: ..., traitCollection: ...)`
    static func fewCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ForecastActiveTab", bundle: ..., traitCollection: ...)`
    static func forecastActiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forecastActiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ForecastInactiveTab", bundle: ..., traitCollection: ...)`
    static func forecastInactiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forecastInactiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HumidityOther", bundle: ..., traitCollection: ...)`
    static func humidityOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidityOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchLogo", bundle: ..., traitCollection: ...)`
    static func launchLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MistDay", bundle: ..., traitCollection: ...)`
    static func mistDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mistDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MistNight", bundle: ..., traitCollection: ...)`
    static func mistNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mistNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrecipitationOther", bundle: ..., traitCollection: ...)`
    static func precipitationOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.precipitationOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PressureOther", bundle: ..., traitCollection: ...)`
    static func pressureOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pressureOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RainDay", bundle: ..., traitCollection: ...)`
    static func rainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RainNight", bundle: ..., traitCollection: ...)`
    static func rainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScatteredCloudsDay", bundle: ..., traitCollection: ...)`
    static func scatteredCloudsDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatteredCloudsDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScatteredCloudsNight", bundle: ..., traitCollection: ...)`
    static func scatteredCloudsNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatteredCloudsNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowerRainDay", bundle: ..., traitCollection: ...)`
    static func showerRainDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showerRainDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ShowerRainNight", bundle: ..., traitCollection: ...)`
    static func showerRainNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showerRainNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnowDay", bundle: ..., traitCollection: ...)`
    static func snowDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnowNight", bundle: ..., traitCollection: ...)`
    static func snowNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snowNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThunderstormDay", bundle: ..., traitCollection: ...)`
    static func thunderstormDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderstormDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThunderstormNight", bundle: ..., traitCollection: ...)`
    static func thunderstormNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderstormNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TodayActiveTab", bundle: ..., traitCollection: ...)`
    static func todayActiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayActiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TodayInactiveTab", bundle: ..., traitCollection: ...)`
    static func todayInactiveTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayInactiveTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WindDirection", bundle: ..., traitCollection: ...)`
    static func windDirection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windDirection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WindOther", bundle: ..., traitCollection: ...)`
    static func windOther(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windOther, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "divider", bundle: ..., traitCollection: ...)`
    static func divider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.divider, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ForecastDayTableViewCell`.
    static let forecastDayTableViewCell = _R.nib._ForecastDayTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ForecastDayTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.forecastDayTableViewCell) instead")
    static func forecastDayTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forecastDayTableViewCell)
    }
    #endif

    static func forecastDayTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForecastDayTableViewCell? {
      return R.nib.forecastDayTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastDayTableViewCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ForecastDayTableViewCell.validate()
    }

    struct _ForecastDayTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForecastDayTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForecastDayTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForecastDayTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ClearSkyDay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ClearSkyDay' is used in nib 'ForecastDayTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cl-light-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-blue' is used in storyboard 'ForecastDayTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cl-light-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-gray' is used in storyboard 'ForecastDayTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try forecast.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try weather.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct forecast: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Forecast"

      static func validate() throws {
        if UIKit.UIImage(named: "Line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line' is used in storyboard 'Forecast', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct weather: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Weather"

      static func validate() throws {
        if UIKit.UIImage(named: "ClearSkyDay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ClearSkyDay' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CurrentLocationOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CurrentLocationOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HumidityOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HumidityOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PrecipitationOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PrecipitationOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PressureOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PressureOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WindDirection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WindDirection' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WindOther", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WindOther' is used in storyboard 'Weather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "divider", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'divider' is used in storyboard 'Weather', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cl-light-blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-light-blue' is used in storyboard 'Weather', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cl-orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cl-orange' is used in storyboard 'Weather', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
